---
layout: post
title:  "Exportando minhas transa√ß√µes do Nubank"
date:   2018-06-25 02:14:02 -0300
categories: automation golang lamba portuguese
---

Quem gosta de passar uma noite todo m√™s revisando gastos e preenchendo planilhas? Bom seria se essas planilhas **se preenchessem sozinhas**, n√©? 

O que eu gostaria na verdade √© que toda a minha vida financeira fosse **automatizada**. Mas vamos l√°, um passo de cada vez.

Nesse post, vou mostrar como usar a API do Nubank para ir preenchendo um canal do meu Slack pessoal, que no futuro poder√° ter reports di√°rios do que anda acontecendo com o meu dinheiro.


### Passo 1: explorando a API do Nubank

Se voc√™ tem o Nubank, pode ver os dados do seu cart√£o no [https://app.nubank.com.br/](https://app.nubank.com.br/). Logando, voc√™ pode ver uma interface com o hist√≥rico de transa√ß√µes, que no caso, √© o que queremos fazer scraping.

![Nubank WepApp]({{ "/assets/nubank_webapp.png" | absolute_url }})

A API por tr√°s √© restful e stateless, com auth per-request e boas pr√°ticas de hypermedia, o que vai facilitar bastante nosso trabalho. Quem j√° tentou fazer scraping sobre uma API stateful sabe o drama que √© üòµ

J√° na tela de login, percebemos que a primeira chamada √© para a rota:

{% highlight javascript %}
https://prod-s0-webapp-proxy.nubank.com.br/api/discovery
{% endhighlight %}

Que responde algo como:

{% highlight javascript %}
{
  "login": "...",
  "pusher_auth_channel": "...",
  ...
}
{% endhighlight %}

Cada rota aponta para um endere√ßo de um proxy `https://prod-s0-webapp-proxy.nubank.com.br`, seguido de uma URL. No caso de login, por exemplo, `/api/proxy/AJxL5L2Tx4PB-W6VD1S2xp14EDQ.aHR0cHM6Ly9wcm9kLWdsb2JhbC1hdXRoLm51YmFuay5jb20uYnIvYXBpL3Rva2Vu`.

A primeira parte (antes do `.`) √© um prefixo para o proxy vigente, e a segunda, √© um endere√ßo codado em base64: `https://prod-global-auth.nubank.com.br/api/token`.

Fazendo uma requisi√ß√£o POST com nosso usu√°rio e senha para essa rota de token, o backend responde com o Token de acesso que vamos durante o scraping, e no body uma s√©rie de outras rotas - e entre elas, a que nos interessa neste post, `events`.

{% highlight javascript %}
{
  "access_token": "...",
  "_links": {
    "account": {
      "href": "..."
    },
    "events": {
      "href": "..."
    },
    ...
  },
  ...
}
{% endhighlight %}

Programando esse fluxo de API temos como resultado nosso cliente "quebradi√ßo", que eu subi neste reposit√≥rio: [https://github.com/rhnasc/nubank_api_exporter](https://github.com/rhnasc/nubank_api_exporter). 

### Passo 2: notificando o Slack sobre √∫ltimas transa√ß√µes

Importando o cliente do passo anterior, conseguimos filtrar os eventos das √∫ltimas 24 horas com esta fun√ß√£o:

{% highlight golang %}
func FilterEventsByTimeRange(events []*nubank.Event, from time.Time, to time.Time) []*nubank.Event {
	filteredEvents := []*nubank.Event{}

	for _, event := range events {
		onRange := event.Time.After(from) && event.Time.Before(to)

		if onRange {
			filteredEvents = append(filteredEvents, event)
		}
	}

	return filteredEvents
}
{% endhighlight %}
[nubank_slack_daily_notifier/filter.go](https://github.com/rhnasc/nubank_slack_daily_notifier/blob/master/filter.go)

Com o resultado desse filtro, notificarei o meu Slack com [esta package](github.com/ashwanthkumar/slack-go-webhook).

A package para o slack nada mais √© que um wrapper sobre o protocolo de webhooks do Slack. Preciso ent√£o adicionar a integra√ß√£o no meu Slack chamada **Incoming WebHooks**.

![App Directory]({{ "/assets/app_directory.png" | absolute_url }})

O slack nos dar√° ent√£o uma URL de webhooks que poderemos postar num canal. Estarei postando em um chamado `#nubank`.

Ao rodar a aplica√ß√£o, o resultado ser√° este, mostrando no Slack uma transa√ß√£o que eu fiz nas √∫ltimas 24 horas:

![App Directory]({{ "/assets/automate_all_the_things.png" | absolute_url }})

BOA! ü§©

O c√≥digo desse passo est√° [neste repo](https://github.com/rhnasc/nubank_slack_daily_notifier).

### Passo 3: rodando tudo em um AWS Lambda

Agora, teremos que subir o nosso c√≥digo Go em um AWS lambda. Como o c√≥digo roda pontualmente, essa parece a melhor op√ß√£o de deployment.

Seu lambda deve se parecer com este aqui:

![Lambda]({{ "/assets/aws_lambda.png" | absolute_url }})

No lado esquerdo, estaremos usando o CloudWatch Events como trigger. O motivo disso √© que podemos configur√°-lo para ser disparado por uma configura√ß√£o crontab. A que eu estou usando √© `cron(0 0 ? * * *)`.

Para subir o c√≥digo, podemos seguir [este tutorial](https://docs.aws.amazon.com/lambda/latest/dg/go-programming-model-handler-types.html). Uma vez que o nosso main funciona (passo anterior), precisamos apenas modific√°-lo para este formato: 

{% highlight golang %}
package main

import (
  "github.com/aws/aws-lambda-go/lambda"

  ...
)

func HandleRequest() {
  // your old main goes here
}

func main() {
	lambda.Start(HandleRequest)
}

{% endhighlight %}

Diferente de outras linguagens de script, a Amazon n√£o vai um editor online para voc√™ mexer no seu c√≥digo. Voc√™ ter√° que compilar e subir apenas um execut√°vel. Ent√£o buildamos o c√≥digo para um SO linux e zipamos para subir na dashboard do Lambda:

`GOOS=linux go build -o main && zip deployment.zip main`

Usando a dashboard, podemos criar um teste para o lambda que acabamos de configurar. Se tudo der certo, agora o nosso c√≥digo vai ser rodado na nuvem, e receberemos novamente o registro da transa√ß√£o pelo canal do Slack :)

![Lambda]({{ "/assets/aws_lambda_success.png" | absolute_url }})

### Great Success

No Slack posso colocar controles interativos para classificar as compras de acordo com minhas categorias.

Tamb√©m posso importar esses dados em um banco relacional, fazer consultas, cruzar com dados de outros bancos e criar planilhas e proje√ß√µes que fa√ßam sentido para mim.

**Automate all the things :)**
